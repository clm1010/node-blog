1、NodeJS和JavaScript的区别

ECMAScript
◆ 定义了语法，写JavaScript和nodejs都必须遵守
◆ 变量定义，循环、判断、函数
◆ 原型和原型链、作用域和闭包、异步

JavaScript
◆ 使用ECMAScript语法规范，外加Web API，缺一不可
◆ DOM操作，BOM操作，事件绑定，Ajax等
◆ 两者结合，即可完成浏览器端的任何操作

NodeJS
◆ 使用ECMAScript语法规范，外加NodeJS API，缺一不可
◆ 处理http，处理文件等，具体参考http://nodejs.cn/api
◆ 两者结合，即可完成Server端的任何操作

总结API
◆ ECMAScript是语法规范
◆ NodeJS = ECMAScript+NodeJS API

2、http请求概述
◆ DNS解析一个IP地址，IP地址对应的一台服务器然后客户端和服务器建立TCP连接，发送http请求
◆ server接收到http请求，处理，并返回
◆ 客户端接收到返回数据，处理数据（如渲染页面，执行js）

TCP 连接：3次握手
◆ 第1次：客户端询问服务器你是否可用
◆ 第2次：服务器告诉客户端自己可用
◆ 第3次：客户端再次告诉服务器，我知道了，我接下来即将访问

NodeJS 处理 get 请求
◆ get请求，即客户端向server端取数据，如查询博客列表
◆ 通过querystring来传递数据，如a.html?a=100&b=200
◆ 浏览器直接访问，就发送get请求

NodeJS 处理 post 请求
◆ post请求，即客户端要像服务端传递数据
◆ 通过post data 传递数据

3、路由和API
ApI：
◆ 前端和后端、不同端（子系统）之间对接的一个术语
◆ url（路由）`/api/blog/list` get，输入，输出

路由：
◆ API的一部分
◆ 后端系统内部的一个模块

4、cookie
◆ 存储在浏览器的一段字符串（最大5kb）
◆ 跨域不共享
◆ 格式如看=v1;k2=v2;k3=v3;因此可以存储结构化数据
◆ 每次发送http请求，会将请求域的cookie一起发送给server
◆ server可以修改cookie并返回给浏览器
◆ 浏览器中也可以通过javascript修改cookie（有限制）

4、session
◆ session 避免用户信息暴漏
◆ 解决 cookie中存储 userid，server 端对应 username
◆ 解决方案 session，即 server 端存储用户信息
  session的问题
◆ 目前session直接是js变量，放在nodejs进程内存中
◆ 第一，进程内存有限，访问量过大，内存暴增怎么办？
◆ 第二，正式上线运行是多进程，进程之间内存无法共享
  为何session适合用redis？
◆ session访问频繁，对性能要求极高
◆ session可不考虑断电丢失数据问题（内存的硬伤）
◆ session数据量不会太大（相比于mysql中存储的数据）
  解决方案redis
◆ 将web sever和redis拆分为两个单独的服务
◆ 双方都是独立的，都是可扩展的（例如都扩展成集群）
◆ （包括mysql，也是一个单独的服务，也可以扩展）
◆ 之前都是把session放在web server（进程的变量、进程的内存）中。现在把session放在redis中存储，就能避免内存过大被挤爆的问题。
◆ 进程之间数据无法共享问题：进程数量的多少跟redis没有关系。session放在redis中，多个进程都是从一个redis中取session缓存。

5、redis
◆ 开启 redis： redis-server
   操作 redis：redis-cli
   设置 redis：set key val
   获取 redis：get key
   删除：del key
   获取所有：keys *

6、stream 介绍
IO 操作的性能瓶颈
◆ IO 包括 “网络IO” 和 “文件IO”
◆ 相比于CPU计算和内存读写，IO特点就是慢

7、日志分析
◆ 如针对 access.log 日志，分析 chrome 的占比
◆ 日志是按行存储的，一行就是一条日志
◆ 使用 nodejs 的 readline (基于 stream，效率高)

8、安全
◆ sql注入 使用 mysql.escape
◆ xss攻击 安装 npm i xss -S 使用方法 const xss = require('xss')  用xss(输入的内容)
◆ 密码加密 使用 const crypto = require('crypto')